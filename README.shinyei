http://www.sca-shinyei.com/pdf/PPD42NS.pdf
https://github.com/opendata-stuttgart/
http://takingspace.org/wp-content/uploads/ShinyeiPPD42NS_Deconstruction_TracyAllen.pdf
https://indiaairquality.com/2014/12/14/measuring-the-pickle-jr-a-modified-ppd42-with-an-attached-fan/
http://www.mouser.com/ds/2/744/Seeed_101020012-838657.pdf
http://www.howmuchsnow.com/arduino/airquality/grovedust/  has polinonium calabraion factors.

https://www.raspberrypi.org/forums/viewtopic.php?f=32&t=122298&p=824523
ESP8266
/************************************************************/
/* OK LAB Particulate Matter Sensor                         */
/*      - nodemcu-LoLin board                               */
/*      - Shinyei PPD42NS                                   */
/*      http://www.sca-shinyei.com/pdf/PPD42NS.pdf          */
/*                                                          */       
/* Wiring Instruction:                                      */
/*      Pin 2 of dust sensor PM2.5 -> Digital 6 (PWM)       */
/*      Pin 3 of dust sensor       -> +5V                   */
/*      Pin 4 of dust sensor PM1   -> Digital 3 (PMW)       */ 
/*                                                          */
/*      - PPD42NS Pin 1 (grey or green)  => GND             */
/*      - PPD42NS Pin 2 (green or white)) => Pin D5 /GPIO14 */
/*        counts particles PM25                             */
/*      - PPD42NS Pin 3 (black or yellow) => Vin            */
/*      - PPD42NS Pin 4 (white or black) => Pin D6 / GPIO12 */
/*        counts particles PM10                             */
/*      - PPD42NS Pin 5 (red)   => unused                   */
/*                                                          */
/************************************************************/

deutsche Version: https://github.com/opendata-stuttgart/sensors-software/blob/master/BeginnersGuide/Guide.md

    Erklärung: Download Arduino Software (getestet mit Version 1.6.5): https://www.arduino.cc/en/Main/OldSoftwareReleases#previous
    Erklärung: Zusatzpackete installieren – esp8266 boards in der Arduino software: https://github.com/esp8266/Arduino#installing-with-boards-manager


https://openhomeautomation.net/connect-esp8266-raspberry-pi/
https://oshlab.com/esp8266-raspberry-pi-gpio-wifi/

https://github.com/aqicn/shinyei-lpo

From: https://www.raspberrypi.org/forums/viewtopic.php?t=120926

You won't need the grove board, the Shinyei sensor has digital outputs that the Pi can monitor

    1 : COMMON(GND)
    2 : OUTPUT(P2)
    3 : INPUT(5VDC 90mA)
    4 : OUTPUT(P1)
    5 : INPUT(T1)･･･FOR THRESHOLD FOR [P2]


The output is stated to be at 4V so a voltage divider is recommended to bring those down to 3V3.

Connect as follows (you may need a breadboard)
Pi Pin 2 (or 4) (5V) connects to Shinyei pin 3 (5V input).
Pi Pin 6 (or 9, 14, 20, 25, 30, 34, 39) (Gnd) connects to Shinyei pin 1 (Common).
Pi Pin 6 (or 9, 14, 20, 25, 30, 34, 39) (Gnd) connects to a 3k3 resistor (voltage divider) the other end of which connects to Pi pin 16 (GPIO 23) (or any other GPIO pin of your choice) and to a 1k2 resistor, the other end of which is connected to Shinyei Pin 2 (output 2).
Pi Pin 6 (or 9, 14, 20, 25, 30, 34, 39) (Gnd) connects to a 3k3 resistor (voltage divider) the other end of which connects to Pi pin 18 (GPIO 24) (or any other GPIO pin of your choice) and to a 1k2 resistor, the other end of which is connected to Shinyei Pin 4 (output 1).
Pi Pin 6 (or 9, 14, 20, 25, 30, 34, 39) (Gnd) connects to a Variable resistor, the other end of which connectors to Pi pin 2 (or 4) (5V) and the wiper of which is connected to Shinyei Pin 5 (P2 threshold setting). Adjust the variable resistor to adjust the size of dust particle which triggers P2.

from: https://software.intel.com/en-us/iot/hardware/sensors/ppd42ns-dust-sensor
source: http://iotdk.intel.com/docs/master/upm/python/_modules/pyupm_ppd42ns.html#PPD42NS
https://github.com/intel-iot-devkit/upm/blob/master/examples/python/ppd42ns.py
import time, sys, signal, atexit
    import pyupm_ppd42ns as upmPpd42ns
     
    # Instantiate a dust sensor on digital pin D8
    myDustSensor = upmPpd42ns.PPD42NS(8)
     
     
    ## Exit handlers ##
    # This function stops python from printing a stacktrace when you hit control-C
    def SIGINTHandler(signum, frame):
        raise SystemExit
     
    # This function lets you run code on exit, including functions from myDustSensor
    def exitHandler():
        print "Exiting"
        sys.exit(0)
     
    # Register exit handlers
    atexit.register(exitHandler)
    signal.signal(signal.SIGINT, SIGINTHandler)
     
     
    notice = ("This program will give readings "
    "every 30 seconds until you stop it")
    print notice
     
    while(1):
        data = myDustSensor.getData()
        # we need to sleep for a bit for the data to print out
        time.sleep(.1)
        print "Low pulse occupancy: " + str(data.lowPulseOccupancy)
        print "Ratio: " + str(data.ratio)
        print "Concentration: " + str(data.concentration)
